import { Readable } from 'stream';
import { Response } from 'node-fetch';

interface ArtifactOptions {
    duration?: number;
    tag?: string;
}
declare class ArtifactBaseRequest {
    protected readonly token: string;
    protected readonly url: string;
    protected readonly options?: ArtifactOptions;
    protected readonly userAgent: string;
    response?: Response;
    constructor(token: string, url: string, userAgent: string, options?: ArtifactOptions);
    protected getHeaders(method: 'GET' | 'HEAD' | 'PUT', options?: ArtifactOptions): {
        [key: string]: string;
    };
}
declare class ArtifactPutRequest extends ArtifactBaseRequest {
    stream(artifact: Readable): Promise<void>;
    buffer(artifact: Buffer): Promise<void>;
}
declare class ArtifactGetRequest extends ArtifactBaseRequest {
    stream(): Promise<Readable>;
    buffer(): Promise<Buffer>;
}
declare class ArtifactExistsRequest extends ArtifactBaseRequest {
    send(): Promise<boolean>;
}

interface RemoteClientOptions {
    teamId?: string;
    product: string;
}
interface RemoteClient {
    exists: (hash: string) => ArtifactExistsRequest;
    get: (hash: string) => ArtifactGetRequest;
    put: (hash: string) => ArtifactPutRequest;
}

declare function createClient(token: string, options: RemoteClientOptions): RemoteClient;

export { ArtifactExistsRequest, ArtifactGetRequest, ArtifactOptions, ArtifactPutRequest, RemoteClient, createClient };
